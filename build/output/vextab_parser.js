/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vextab_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"e":3,"maybe_vextab":4,"EOF":5,"vextab":6,"stave":7,"voice":8,"maybe_options":9,"stave_data":10,"OPTIONS":11,"options":12,"TABSTAVE":13,"VOICE":14,"stave_additions":15,"TEXT":16,"text":17,"NOTES":18,"notes":19,"WORD":20,"=":21,"STR":22,",":23,"lingo":24,"line":25,"chord":26,"time":27,"bar":28,"[":29,"]":30,"tuplets":31,"annotations":32,"command":33,"rest":34,"|":35,":":36,"frets":37,"maybe_decorator":38,"/":39,"string":40,"chord_line":41,".":42,"(":43,")":44,"articulation":45,"NUMBER":46,"abc":47,"_":48,"timed_fret":49,"time_values":50,"maybe_dot":51,"time_unit":52,"maybe_slash":53,"w":54,"h":55,"q":56,"d":57,"S":58,"-":59,"s":60,"t":61,"T":62,"b":63,"p":64,"v":65,"V":66,"u":67,"^":68,"$":69,"annotation_words":70,"!":71,"COMMAND":72,"#":73,"ABC":74,"abc_accidental":75,"accidental_type":76,"@":77,"n":78,"~":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"OPTIONS",13:"TABSTAVE",14:"VOICE",16:"TEXT",18:"NOTES",20:"WORD",21:"=",22:"STR",23:",",29:"[",30:"]",35:"|",36:":",39:"/",42:".",43:"(",44:")",46:"NUMBER",48:"_",54:"w",55:"h",56:"q",57:"d",58:"S",59:"-",60:"s",61:"t",62:"T",63:"b",64:"p",65:"v",66:"V",67:"u",68:"^",69:"$",71:"!",72:"COMMAND",73:"#",74:"ABC",77:"@",78:"n",79:"~"},
productions_: [0,[3,2],[4,0],[4,1],[6,1],[6,2],[7,3],[7,2],[7,2],[8,1],[8,1],[10,1],[10,2],[15,2],[15,2],[9,0],[9,1],[12,3],[12,4],[17,1],[17,3],[19,1],[19,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[28,1],[28,3],[28,3],[28,3],[28,3],[28,3],[25,4],[41,1],[41,3],[26,4],[26,5],[37,1],[37,1],[37,4],[37,2],[37,4],[49,5],[49,1],[49,5],[49,8],[49,1],[49,4],[27,3],[50,2],[52,1],[52,1],[52,1],[52,1],[51,0],[51,1],[53,0],[53,1],[40,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[38,1],[38,1],[38,1],[38,1],[38,0],[31,3],[31,5],[32,3],[70,1],[70,3],[33,3],[34,2],[34,3],[34,4],[47,3],[75,1],[75,2],[75,1],[75,2],[75,1],[75,0],[76,0],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      if (Vex.Flow.VexTab.DEBUG && $$[$0-1]) {
        console.log($$[$0-1]);
        console.log(JSON.stringify($$[$0-1], null, " "));
      }
      return $$[$0-1];
    
break;
case 2: this.$ = null 
break;
case 3: this.$ = $$[$0] 
break;
case 4: this.$ = [$$[$0]] 
break;
case 5: this.$ = [].concat($$[$0-1], $$[$0]) 
break;
case 6: this.$ = {
        element: $$[$0-2],
        options: $$[$0-1],
        notes: $$[$0].notes,
        text: $$[$0].text,
        _l: _$[$0-2].first_line,
        _c: _$[$0-2].first_column
      }
    
break;
case 7: this.$ = {
        element: $$[$0-1],
        options: $$[$0],
        _l: _$[$0-1].first_line,
        _c: _$[$0-1].first_column
      }
    
break;
case 8:
      this.$ = {
        element: "options",
        params: $$[$0],
        _l: _$[$0-1].first_line,
        _c: _$[$0-1].first_column
      }
    
break;
case 11: this.$ = $$[$0] 
break;
case 12:
      var text = [].concat($$[$0-1].text, $$[$0].text);
      var notes = [].concat($$[$0-1].notes, $$[$0].notes);
      this.$ = {text: text, notes: notes};
    
break;
case 13:this.$ = {text: $$[$0], notes: []}
break;
case 14:this.$ = {notes: $$[$0], text: []}
break;
case 15: this.$ = null 
break;
case 16: this.$ = $$[$0] 
break;
case 17: this.$ = [{
        key: $$[$0-2],
        value: $$[$0],
        _l: _$[$0-2].first_line,
        _c: _$[$0-2].first_column
      }]
    
break;
case 18: this.$ = [].concat($$[$0-3], [{
        key: $$[$0-2],
        value: $$[$0],
        _l: _$[$0-2].first_line,
        _c: _$[$0-2].first_column
        }])
    
break;
case 19: this.$ = [{text: $$[$0], _l: _$[$0].first_line, _c: _$[$0].first_column}] 
break;
case 20: this.$ = [].concat($$[$0-2], {text: $$[$0], _l: _$[$0].first_line, _c: _$[$0].first_column}) 
break;
case 21: this.$ = $$[$0] 
break;
case 22: this.$ = [].concat($$[$0-1], $$[$0])  
break;
case 23: this.$ = $$[$0] 
break;
case 24: this.$ = $$[$0] 
break;
case 25: this.$ = $$[$0] 
break;
case 26: this.$ = [{
        command: "bar",
        type: $$[$0],
        _l: _$[$0].first_line,
        _c: _$[$0].first_column
        }]
    
break;
case 27: this.$ = [{
        command: "open_beam",
        _l: _$[$0].first_line,
        _c: _$[$0].first_column
      }]
    
break;
case 28: this.$ = [{
        command: "close_beam",
        _l: _$[$0].first_line,
        _c: _$[$0].first_column
      }]
    
break;
case 29: this.$ = [{
        command: "tuplet",
        params: $$[$0],
        _l: _$[$0].first_line,
        _c: _$[$0].first_column
      }]
    
break;
case 30: this.$ = [{
        command: "annotations",
        params: $$[$0],
        _l: _$[$0].first_line,
        _c: _$[$0].first_column
      }]
    
break;
case 31: this.$ = [{
        command: "command",
        params: $$[$0],
        _l: _$[$0].first_line,
        _c: _$[$0].first_column
      }]
    
break;
case 32:
    this.$ = [{
        command: "rest",
        params: $$[$0]
      }]
    
break;
case 33: this.$ = 'single' 
break;
case 34: this.$ = 'double' 
break;
case 35: this.$ = 'end' 
break;
case 36: this.$ = 'repeat-end' 
break;
case 37: this.$ = 'repeat-begin' 
break;
case 38: this.$ = 'repeat-both' 
break;
case 39:
      _.extend(_.last($$[$0-3]), {decorator: $$[$0-2]})
      _.each($$[$0-3], function(fret) { fret['string'] = $$[$0] })
      this.$ = $$[$0-3]
    
break;
case 40: this.$ = $$[$0] 
break;
case 41: this.$ = [].concat($$[$0-2], $$[$0]) 
break;
case 42: this.$ = [{chord: $$[$0-2], decorator: $$[$0]}] 
break;
case 43: this.$ = [{chord: $$[$0-2], articulation: $$[$0-4], decorator: $$[$0]}] 
break;
case 44: this.$ = [{
        fret: $$[$0],
        _l: _$[$0].first_line,
        _c: _$[$0].first_column}]
    
break;
case 45: this.$ = [{abc: $$[$0], _l: _$[$0].first_line, _c: _$[$0].first_column}]
break;
case 46: this.$ = [{abc: $$[$0-3], octave: $$[$0-2],
             fret: $$[$0], _l: _$[$0-3].first_line, _c: _$[$0-3].first_column}]
break;
case 47: this.$ = [_.extend($$[$0], {articulation: $$[$0-1]})] 
break;
case 48:
      _.extend(_.last($$[$0-3]), {decorator: $$[$0-2]})
      _.extend($$[$0], {articulation: $$[$0-1]})
      $$[$0-3].push($$[$0])
      this.$ = $$[$0-3]
    
break;
case 49: this.$ = {
      time: $$[$0-3], dot: $$[$0-2], fret: $$[$0],
      _l: _$[$0-4].first_line, _c: _$[$0-4].first_column}
break;
case 50: this.$ = {fret: $$[$0], _l: _$[$0].first_line, _c: _$[$0].first_column} 
break;
case 51: this.$ = {time: $$[$0-3], dot: $$[$0-2], abc: $$[$0]}
break;
case 52: this.$ = {time: $$[$0-6], dot: $$[$0-5], abc: $$[$0-3], octave: $$[$0-2], fret: $$[$0]}
break;
case 53: this.$ = {abc: $$[$0], _l: _$[$0].first_line, _c: _$[$0].first_column} 
break;
case 54: this.$ = {abc: $$[$0-3], octave: $$[$0-2],
            fret: $$[$0], _l: _$[$0-3].first_line, _c: _$[$0-3].first_column} 
break;
case 55: this.$ = {time: $$[$0-1], dot: $$[$0]} 
break;
case 56: this.$ = $$[$0-1] + $$[$0] 
break;
case 57: this.$ = $$[$0] 
break;
case 58: this.$ = $$[$0] 
break;
case 59: this.$ = $$[$0] 
break;
case 60: this.$ = $$[$0] 
break;
case 61: this.$ = false 
break;
case 62: this.$ = true 
break;
case 63: this.$ = '' 
break;
case 64: this.$ = 's' 
break;
case 65: this.$ = $$[$0] 
break;
case 66: this.$ = '-' 
break;
case 67: this.$ = 's' 
break;
case 68: this.$ = 't' 
break;
case 69: this.$ = 'T' 
break;
case 70: this.$ = 'b' 
break;
case 71: this.$ = 'h' 
break;
case 72: this.$ = 'p' 
break;
case 73: this.$ = 'v' 
break;
case 74: this.$ = 'V' 
break;
case 75: this.$ = 'u' 
break;
case 76: this.$ = 'd' 
break;
case 77: this.$ = null 
break;
case 78: this.$ = {tuplet: $$[$0-1]} 
break;
case 79: this.$ = {tuplet: $$[$0-3], notes: $$[$0-1]} 
break;
case 80: this.$ = $$[$0-1] 
break;
case 81: this.$ = [$$[$0]] 
break;
case 82: this.$ = [].concat($$[$0-2], $$[$0]) 
break;
case 83: this.$ = $$[$0-1] 
break;
case 84: this.$ = {position: 0} 
break;
case 85: this.$ = {position: $$[$0-1]} 
break;
case 86: this.$ = {position: $$[$0-1] * -1} 
break;
case 87: this.$ = {key: $$[$0-2], accidental: $$[$0-1], accidental_type: $$[$0]} 
break;
case 88: this.$ = "#" 
break;
case 89: this.$ = "##" 
break;
case 90: this.$ = "b" 
break;
case 91: this.$ = "bb" 
break;
case 92: this.$ = "n" 
break;
case 94: this.$ = null; 
break;
case 95: this.$ = "c" 
break;
}
},
table: [{3:1,4:2,5:[2,2],6:3,7:4,8:5,11:[1,6],13:[1,7],14:[1,8]},{1:[3]},{5:[1,9]},{5:[2,3],7:10,8:5,11:[1,6],13:[1,7],14:[1,8]},{5:[2,4],11:[2,4],13:[2,4],14:[2,4]},{5:[2,15],9:11,11:[2,15],12:12,13:[2,15],14:[2,15],16:[2,15],18:[2,15],20:[1,13]},{12:14,20:[1,13]},{5:[2,9],11:[2,9],13:[2,9],14:[2,9],16:[2,9],18:[2,9],20:[2,9]},{5:[2,10],11:[2,10],13:[2,10],14:[2,10],16:[2,10],18:[2,10],20:[2,10]},{1:[2,1]},{5:[2,5],11:[2,5],13:[2,5],14:[2,5]},{5:[2,7],10:15,11:[2,7],13:[2,7],14:[2,7],15:16,16:[1,17],18:[1,18]},{5:[2,16],11:[2,16],13:[2,16],14:[2,16],16:[2,16],18:[2,16],20:[1,19]},{21:[1,20]},{5:[2,8],11:[2,8],13:[2,8],14:[2,8],20:[1,19]},{5:[2,6],11:[2,6],13:[2,6],14:[2,6],15:21,16:[1,17],18:[1,18]},{5:[2,11],11:[2,11],13:[2,11],14:[2,11],16:[2,11],18:[2,11]},{17:22,22:[1,23]},{19:24,21:[1,41],24:25,25:26,26:27,27:28,28:29,29:[1,30],30:[1,31],31:32,32:33,33:34,34:35,35:[1,40],36:[1,39],37:36,43:[1,37],45:38,46:[1,46],47:47,55:[1,53],59:[1,48],60:[1,49],61:[1,50],62:[1,51],63:[1,52],64:[1,54],68:[1,42],69:[1,43],71:[1,44],73:[1,45],74:[1,55]},{21:[1,56]},{20:[1,57]},{5:[2,12],11:[2,12],13:[2,12],14:[2,12],16:[2,12],18:[2,12]},{5:[2,13],11:[2,13],13:[2,13],14:[2,13],16:[2,13],18:[2,13],23:[1,58]},{5:[2,19],11:[2,19],13:[2,19],14:[2,19],16:[2,19],18:[2,19],23:[2,19]},{5:[2,14],11:[2,14],13:[2,14],14:[2,14],16:[2,14],18:[2,14],21:[1,41],24:59,25:26,26:27,27:28,28:29,29:[1,30],30:[1,31],31:32,32:33,33:34,34:35,35:[1,40],36:[1,39],37:36,43:[1,37],45:38,46:[1,46],47:47,55:[1,53],59:[1,48],60:[1,49],61:[1,50],62:[1,51],63:[1,52],64:[1,54],68:[1,42],69:[1,43],71:[1,44],73:[1,45],74:[1,55]},{5:[2,21],11:[2,21],13:[2,21],14:[2,21],16:[2,21],18:[2,21],21:[2,21],29:[2,21],30:[2,21],35:[2,21],36:[2,21],43:[2,21],46:[2,21],55:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],64:[2,21],68:[2,21],69:[2,21],71:[2,21],73:[2,21],74:[2,21]},{5:[2,23],11:[2,23],13:[2,23],14:[2,23],16:[2,23],18:[2,23],21:[2,23],29:[2,23],30:[2,23],35:[2,23],36:[2,23],43:[2,23],46:[2,23],55:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23],68:[2,23],69:[2,23],71:[2,23],73:[2,23],74:[2,23]},{5:[2,24],11:[2,24],13:[2,24],14:[2,24],16:[2,24],18:[2,24],21:[2,24],29:[2,24],30:[2,24],35:[2,24],36:[2,24],43:[2,24],46:[2,24],55:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],68:[2,24],69:[2,24],71:[2,24],73:[2,24],74:[2,24]},{5:[2,25],11:[2,25],13:[2,25],14:[2,25],16:[2,25],18:[2,25],21:[2,25],29:[2,25],30:[2,25],35:[2,25],36:[2,25],43:[2,25],46:[2,25],55:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],68:[2,25],69:[2,25],71:[2,25],73:[2,25],74:[2,25]},{5:[2,26],11:[2,26],13:[2,26],14:[2,26],16:[2,26],18:[2,26],21:[2,26],29:[2,26],30:[2,26],35:[2,26],36:[2,26],43:[2,26],46:[2,26],55:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],68:[2,26],69:[2,26],71:[2,26],73:[2,26],74:[2,26]},{5:[2,27],11:[2,27],13:[2,27],14:[2,27],16:[2,27],18:[2,27],21:[2,27],29:[2,27],30:[2,27],35:[2,27],36:[2,27],43:[2,27],46:[2,27],55:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],68:[2,27],69:[2,27],71:[2,27],73:[2,27],74:[2,27]},{5:[2,28],11:[2,28],13:[2,28],14:[2,28],16:[2,28],18:[2,28],21:[2,28],29:[2,28],30:[2,28],35:[2,28],36:[2,28],43:[2,28],46:[2,28],55:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],68:[2,28],69:[2,28],71:[2,28],73:[2,28],74:[2,28]},{5:[2,29],11:[2,29],13:[2,29],14:[2,29],16:[2,29],18:[2,29],21:[2,29],29:[2,29],30:[2,29],35:[2,29],36:[2,29],43:[2,29],46:[2,29],55:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],68:[2,29],69:[2,29],71:[2,29],73:[2,29],74:[2,29]},{5:[2,30],11:[2,30],13:[2,30],14:[2,30],16:[2,30],18:[2,30],21:[2,30],29:[2,30],30:[2,30],35:[2,30],36:[2,30],43:[2,30],46:[2,30],55:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],68:[2,30],69:[2,30],71:[2,30],73:[2,30],74:[2,30]},{5:[2,31],11:[2,31],13:[2,31],14:[2,31],16:[2,31],18:[2,31],21:[2,31],29:[2,31],30:[2,31],35:[2,31],36:[2,31],43:[2,31],46:[2,31],55:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31],63:[2,31],64:[2,31],68:[2,31],69:[2,31],71:[2,31],73:[2,31],74:[2,31]},{5:[2,32],11:[2,32],13:[2,32],14:[2,32],16:[2,32],18:[2,32],21:[2,32],29:[2,32],30:[2,32],35:[2,32],36:[2,32],43:[2,32],46:[2,32],55:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32],68:[2,32],69:[2,32],71:[2,32],73:[2,32],74:[2,32]},{38:60,39:[2,77],55:[2,77],57:[1,64],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[1,61],66:[1,62],67:[1,63]},{25:66,37:36,41:65,45:67,46:[1,46],47:47,55:[1,53],59:[1,48],60:[1,49],61:[1,50],62:[1,51],63:[1,52],64:[1,54],74:[1,55]},{36:[1,70],43:[1,68],46:[1,71],47:72,49:69,74:[1,55]},{46:[1,75],50:73,52:74,54:[1,76],55:[1,77],56:[1,78]},{5:[2,33],11:[2,33],13:[2,33],14:[2,33],16:[2,33],18:[2,33],21:[2,33],29:[2,33],30:[2,33],35:[2,33],36:[2,33],43:[2,33],46:[2,33],55:[2,33],59:[2,33],60:[2,33],61:[2,33],62:[2,33],63:[2,33],64:[2,33],68:[2,33],69:[2,33],71:[2,33],73:[2,33],74:[2,33]},{35:[1,79],36:[1,80]},{46:[1,81]},{20:[1,83],70:82},{72:[1,84]},{46:[1,86],59:[1,87],73:[1,85]},{39:[2,44],55:[2,44],57:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[2,44],65:[2,44],66:[2,44],67:[2,44]},{39:[2,45],46:[1,88],55:[2,45],57:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],65:[2,45],66:[2,45],67:[2,45]},{36:[2,66],43:[2,66],46:[2,66],74:[2,66]},{36:[2,67],43:[2,67],46:[2,67],74:[2,67]},{36:[2,68],43:[2,68],46:[2,68],74:[2,68]},{36:[2,69],43:[2,69],46:[2,69],74:[2,69]},{36:[2,70],43:[2,70],46:[2,70],74:[2,70]},{36:[2,71],43:[2,71],46:[2,71],74:[2,71]},{36:[2,72],43:[2,72],46:[2,72],74:[2,72]},{39:[2,93],46:[2,93],55:[2,93],57:[2,93],59:[2,93],60:[2,93],61:[2,93],62:[2,93],63:[2,93],64:[2,93],65:[2,93],66:[2,93],67:[2,93],73:[1,90],75:89,77:[1,91],78:[1,92],79:[2,93]},{20:[1,93]},{5:[2,17],11:[2,17],13:[2,17],14:[2,17],16:[2,17],18:[2,17],20:[2,17]},{22:[1,94]},{5:[2,22],11:[2,22],13:[2,22],14:[2,22],16:[2,22],18:[2,22],21:[2,22],29:[2,22],30:[2,22],35:[2,22],36:[2,22],43:[2,22],46:[2,22],55:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],64:[2,22],68:[2,22],69:[2,22],71:[2,22],73:[2,22],74:[2,22]},{39:[1,95],45:96,55:[1,53],59:[1,48],60:[1,49],61:[1,50],62:[1,51],63:[1,52],64:[1,54]},{5:[2,73],11:[2,73],13:[2,73],14:[2,73],16:[2,73],18:[2,73],21:[2,73],29:[2,73],30:[2,73],35:[2,73],36:[2,73],39:[2,73],43:[2,73],46:[2,73],55:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],68:[2,73],69:[2,73],71:[2,73],73:[2,73],74:[2,73]},{5:[2,74],11:[2,74],13:[2,74],14:[2,74],16:[2,74],18:[2,74],21:[2,74],29:[2,74],30:[2,74],35:[2,74],36:[2,74],39:[2,74],43:[2,74],46:[2,74],55:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],68:[2,74],69:[2,74],71:[2,74],73:[2,74],74:[2,74]},{5:[2,75],11:[2,75],13:[2,75],14:[2,75],16:[2,75],18:[2,75],21:[2,75],29:[2,75],30:[2,75],35:[2,75],36:[2,75],39:[2,75],43:[2,75],46:[2,75],55:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],68:[2,75],69:[2,75],71:[2,75],73:[2,75],74:[2,75]},{5:[2,76],11:[2,76],13:[2,76],14:[2,76],16:[2,76],18:[2,76],21:[2,76],29:[2,76],30:[2,76],35:[2,76],36:[2,76],39:[2,76],43:[2,76],46:[2,76],55:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],68:[2,76],69:[2,76],71:[2,76],73:[2,76],74:[2,76]},{42:[1,98],44:[1,97]},{42:[2,40],44:[2,40]},{36:[1,70],46:[1,71],47:72,49:69,74:[1,55]},{25:66,37:36,41:99,45:67,46:[1,46],47:47,55:[1,53],59:[1,48],60:[1,49],61:[1,50],62:[1,51],63:[1,52],64:[1,54],74:[1,55]},{39:[2,47],55:[2,47],57:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47]},{46:[1,75],50:100,52:74,54:[1,76],55:[1,77],56:[1,78]},{39:[2,50],55:[2,50],57:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50]},{39:[2,53],46:[1,101],55:[2,53],57:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53]},{5:[2,61],11:[2,61],13:[2,61],14:[2,61],16:[2,61],18:[2,61],21:[2,61],29:[2,61],30:[2,61],35:[2,61],36:[2,61],43:[2,61],46:[2,61],51:102,55:[2,61],57:[1,103],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],68:[2,61],69:[2,61],71:[2,61],73:[2,61],74:[2,61]},{5:[2,63],11:[2,63],13:[2,63],14:[2,63],16:[2,63],18:[2,63],21:[2,63],29:[2,63],30:[2,63],35:[2,63],36:[2,63],43:[2,63],46:[2,63],53:104,55:[2,63],57:[2,63],58:[1,105],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],68:[2,63],69:[2,63],71:[2,63],73:[2,63],74:[2,63]},{5:[2,57],11:[2,57],13:[2,57],14:[2,57],16:[2,57],18:[2,57],21:[2,57],29:[2,57],30:[2,57],35:[2,57],36:[2,57],43:[2,57],46:[2,57],55:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],68:[2,57],69:[2,57],71:[2,57],73:[2,57],74:[2,57]},{5:[2,58],11:[2,58],13:[2,58],14:[2,58],16:[2,58],18:[2,58],21:[2,58],29:[2,58],30:[2,58],35:[2,58],36:[2,58],43:[2,58],46:[2,58],55:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],68:[2,58],69:[2,58],71:[2,58],73:[2,58],74:[2,58]},{5:[2,59],11:[2,59],13:[2,59],14:[2,59],16:[2,59],18:[2,59],21:[2,59],29:[2,59],30:[2,59],35:[2,59],36:[2,59],43:[2,59],46:[2,59],55:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],68:[2,59],69:[2,59],71:[2,59],73:[2,59],74:[2,59]},{5:[2,60],11:[2,60],13:[2,60],14:[2,60],16:[2,60],18:[2,60],21:[2,60],29:[2,60],30:[2,60],35:[2,60],36:[2,60],43:[2,60],46:[2,60],55:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],68:[2,60],69:[2,60],71:[2,60],73:[2,60],74:[2,60]},{21:[1,107],35:[1,106],36:[1,108]},{35:[1,109],36:[1,110]},{23:[1,112],68:[1,111]},{23:[1,114],69:[1,113]},{23:[2,81],69:[2,81]},{71:[1,115]},{5:[2,84],11:[2,84],13:[2,84],14:[2,84],16:[2,84],18:[2,84],21:[2,84],29:[2,84],30:[2,84],35:[2,84],36:[2,84],43:[2,84],46:[2,84],55:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],64:[2,84],68:[2,84],69:[2,84],71:[2,84],73:[2,84],74:[2,84]},{73:[1,116]},{46:[1,117]},{48:[1,118]},{39:[2,94],46:[2,94],55:[2,94],57:[2,94],59:[2,94],60:[2,94],61:[2,94],62:[2,94],63:[2,94],64:[2,94],65:[2,94],66:[2,94],67:[2,94],76:119,79:[1,120]},{39:[2,88],46:[2,88],55:[2,88],57:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],63:[2,88],64:[2,88],65:[2,88],66:[2,88],67:[2,88],73:[1,121],79:[2,88]},{39:[2,90],46:[2,90],55:[2,90],57:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],63:[2,90],64:[2,90],65:[2,90],66:[2,90],67:[2,90],77:[1,122],79:[2,90]},{39:[2,92],46:[2,92],55:[2,92],57:[2,92],59:[2,92],60:[2,92],61:[2,92],62:[2,92],63:[2,92],64:[2,92],65:[2,92],66:[2,92],67:[2,92],79:[2,92]},{5:[2,18],11:[2,18],13:[2,18],14:[2,18],16:[2,18],18:[2,18],20:[2,18]},{5:[2,20],11:[2,20],13:[2,20],14:[2,20],16:[2,20],18:[2,20],23:[2,20]},{40:123,46:[1,124]},{36:[1,70],46:[1,71],47:72,49:125,74:[1,55]},{5:[2,77],11:[2,77],13:[2,77],14:[2,77],16:[2,77],18:[2,77],21:[2,77],29:[2,77],30:[2,77],35:[2,77],36:[2,77],38:126,43:[2,77],46:[2,77],55:[2,77],57:[1,64],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[1,61],66:[1,62],67:[1,63],68:[2,77],69:[2,77],71:[2,77],73:[2,77],74:[2,77]},{25:127,37:36,45:67,46:[1,46],47:47,55:[1,53],59:[1,48],60:[1,49],61:[1,50],62:[1,51],63:[1,52],64:[1,54],74:[1,55]},{42:[1,98],44:[1,128]},{36:[2,61],51:129,57:[1,103]},{48:[1,130]},{5:[2,55],11:[2,55],13:[2,55],14:[2,55],16:[2,55],18:[2,55],21:[2,55],29:[2,55],30:[2,55],35:[2,55],36:[2,55],43:[2,55],46:[2,55],55:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],68:[2,55],69:[2,55],71:[2,55],73:[2,55],74:[2,55]},{5:[2,62],11:[2,62],13:[2,62],14:[2,62],16:[2,62],18:[2,62],21:[2,62],29:[2,62],30:[2,62],35:[2,62],36:[2,62],43:[2,62],46:[2,62],55:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],68:[2,62],69:[2,62],71:[2,62],73:[2,62],74:[2,62]},{5:[2,56],11:[2,56],13:[2,56],14:[2,56],16:[2,56],18:[2,56],21:[2,56],29:[2,56],30:[2,56],35:[2,56],36:[2,56],43:[2,56],46:[2,56],55:[2,56],57:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],68:[2,56],69:[2,56],71:[2,56],73:[2,56],74:[2,56]},{5:[2,64],11:[2,64],13:[2,64],14:[2,64],16:[2,64],18:[2,64],21:[2,64],29:[2,64],30:[2,64],35:[2,64],36:[2,64],43:[2,64],46:[2,64],55:[2,64],57:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],68:[2,64],69:[2,64],71:[2,64],73:[2,64],74:[2,64]},{5:[2,34],11:[2,34],13:[2,34],14:[2,34],16:[2,34],18:[2,34],21:[2,34],29:[2,34],30:[2,34],35:[2,34],36:[2,34],43:[2,34],46:[2,34],55:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],68:[2,34],69:[2,34],71:[2,34],73:[2,34],74:[2,34]},{5:[2,35],11:[2,35],13:[2,35],14:[2,35],16:[2,35],18:[2,35],21:[2,35],29:[2,35],30:[2,35],35:[2,35],36:[2,35],43:[2,35],46:[2,35],55:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],68:[2,35],69:[2,35],71:[2,35],73:[2,35],74:[2,35]},{5:[2,37],11:[2,37],13:[2,37],14:[2,37],16:[2,37],18:[2,37],21:[2,37],29:[2,37],30:[2,37],35:[2,37],36:[2,37],43:[2,37],46:[2,37],55:[2,37],59:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],64:[2,37],68:[2,37],69:[2,37],71:[2,37],73:[2,37],74:[2,37]},{5:[2,36],11:[2,36],13:[2,36],14:[2,36],16:[2,36],18:[2,36],21:[2,36],29:[2,36],30:[2,36],35:[2,36],36:[2,36],43:[2,36],46:[2,36],55:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],68:[2,36],69:[2,36],71:[2,36],73:[2,36],74:[2,36]},{5:[2,38],11:[2,38],13:[2,38],14:[2,38],16:[2,38],18:[2,38],21:[2,38],29:[2,38],30:[2,38],35:[2,38],36:[2,38],43:[2,38],46:[2,38],55:[2,38],59:[2,38],60:[2,38],61:[2,38],62:[2,38],63:[2,38],64:[2,38],68:[2,38],69:[2,38],71:[2,38],73:[2,38],74:[2,38]},{5:[2,78],11:[2,78],13:[2,78],14:[2,78],16:[2,78],18:[2,78],21:[2,78],29:[2,78],30:[2,78],35:[2,78],36:[2,78],43:[2,78],46:[2,78],55:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],68:[2,78],69:[2,78],71:[2,78],73:[2,78],74:[2,78]},{46:[1,131]},{5:[2,80],11:[2,80],13:[2,80],14:[2,80],16:[2,80],18:[2,80],21:[2,80],29:[2,80],30:[2,80],35:[2,80],36:[2,80],43:[2,80],46:[2,80],55:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],68:[2,80],69:[2,80],71:[2,80],73:[2,80],74:[2,80]},{20:[1,132]},{5:[2,83],11:[2,83],13:[2,83],14:[2,83],16:[2,83],18:[2,83],21:[2,83],29:[2,83],30:[2,83],35:[2,83],36:[2,83],43:[2,83],46:[2,83],55:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],68:[2,83],69:[2,83],71:[2,83],73:[2,83],74:[2,83]},{5:[2,85],11:[2,85],13:[2,85],14:[2,85],16:[2,85],18:[2,85],21:[2,85],29:[2,85],30:[2,85],35:[2,85],36:[2,85],43:[2,85],46:[2,85],55:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],64:[2,85],68:[2,85],69:[2,85],71:[2,85],73:[2,85],74:[2,85]},{73:[1,133]},{46:[1,134]},{39:[2,87],46:[2,87],55:[2,87],57:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],64:[2,87],65:[2,87],66:[2,87],67:[2,87]},{39:[2,95],46:[2,95],55:[2,95],57:[2,95],59:[2,95],60:[2,95],61:[2,95],62:[2,95],63:[2,95],64:[2,95],65:[2,95],66:[2,95],67:[2,95]},{39:[2,89],46:[2,89],55:[2,89],57:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],63:[2,89],64:[2,89],65:[2,89],66:[2,89],67:[2,89],79:[2,89]},{39:[2,91],46:[2,91],55:[2,91],57:[2,91],59:[2,91],60:[2,91],61:[2,91],62:[2,91],63:[2,91],64:[2,91],65:[2,91],66:[2,91],67:[2,91],79:[2,91]},{5:[2,39],11:[2,39],13:[2,39],14:[2,39],16:[2,39],18:[2,39],21:[2,39],29:[2,39],30:[2,39],35:[2,39],36:[2,39],42:[2,39],43:[2,39],44:[2,39],46:[2,39],55:[2,39],59:[2,39],60:[2,39],61:[2,39],62:[2,39],63:[2,39],64:[2,39],68:[2,39],69:[2,39],71:[2,39],73:[2,39],74:[2,39]},{5:[2,65],11:[2,65],13:[2,65],14:[2,65],16:[2,65],18:[2,65],21:[2,65],29:[2,65],30:[2,65],35:[2,65],36:[2,65],42:[2,65],43:[2,65],44:[2,65],46:[2,65],55:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],68:[2,65],69:[2,65],71:[2,65],73:[2,65],74:[2,65]},{39:[2,48],55:[2,48],57:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48]},{5:[2,42],11:[2,42],13:[2,42],14:[2,42],16:[2,42],18:[2,42],21:[2,42],29:[2,42],30:[2,42],35:[2,42],36:[2,42],43:[2,42],46:[2,42],55:[2,42],59:[2,42],60:[2,42],61:[2,42],62:[2,42],63:[2,42],64:[2,42],68:[2,42],69:[2,42],71:[2,42],73:[2,42],74:[2,42]},{42:[2,41],44:[2,41]},{5:[2,77],11:[2,77],13:[2,77],14:[2,77],16:[2,77],18:[2,77],21:[2,77],29:[2,77],30:[2,77],35:[2,77],36:[2,77],38:135,43:[2,77],46:[2,77],55:[2,77],57:[1,64],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[1,61],66:[1,62],67:[1,63],68:[2,77],69:[2,77],71:[2,77],73:[2,77],74:[2,77]},{36:[1,136]},{46:[1,137]},{68:[1,138]},{23:[2,82],69:[2,82]},{5:[2,86],11:[2,86],13:[2,86],14:[2,86],16:[2,86],18:[2,86],21:[2,86],29:[2,86],30:[2,86],35:[2,86],36:[2,86],43:[2,86],46:[2,86],55:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],64:[2,86],68:[2,86],69:[2,86],71:[2,86],73:[2,86],74:[2,86]},{39:[2,46],55:[2,46],57:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46]},{5:[2,43],11:[2,43],13:[2,43],14:[2,43],16:[2,43],18:[2,43],21:[2,43],29:[2,43],30:[2,43],35:[2,43],36:[2,43],43:[2,43],46:[2,43],55:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],64:[2,43],68:[2,43],69:[2,43],71:[2,43],73:[2,43],74:[2,43]},{46:[1,139],47:140,74:[1,55]},{39:[2,54],55:[2,54],57:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54]},{5:[2,79],11:[2,79],13:[2,79],14:[2,79],16:[2,79],18:[2,79],21:[2,79],29:[2,79],30:[2,79],35:[2,79],36:[2,79],43:[2,79],46:[2,79],55:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],68:[2,79],69:[2,79],71:[2,79],73:[2,79],74:[2,79]},{39:[2,49],55:[2,49],57:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49]},{39:[2,51],46:[1,141],55:[2,51],57:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51]},{48:[1,142]},{46:[1,143]},{39:[2,52],55:[2,52],57:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52]}],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  Vex.L("Starting parser.");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('notes'); return 18; 
break;
case 1: this.begin('options'); return 13; 
break;
case 2: this.begin('options'); return 'STAVE'; 
break;
case 3: this.begin('options'); return 14; 
break;
case 4: this.begin('options'); return 11; 
break;
case 5: this.begin('text'); return 16; 
break;
case 6:return 20
break;
case 7: this.begin('annotations'); return "$" 
break;
case 8: this.begin('notes'); return "$" 
break;
case 9:return 20
break;
case 10: this.begin('command'); return "!" 
break;
case 11: this.begin('notes'); return "!" 
break;
case 12:return 72
break;
case 13:return 22
break;
case 14:return 39
break;
case 15:return '+'
break;
case 16:return 36
break;
case 17:return 21
break;
case 18:return 43
break;
case 19:return 44
break;
case 20:return 29
break;
case 21:return 30
break;
case 22:return 68
break;
case 23:return 23
break;
case 24:return 35
break;
case 25:return 42
break;
case 26:return 73
break;
case 27:return 77
break;
case 28:return 63
break;
case 29:return 60
break;
case 30:return 55
break;
case 31:return 64
break;
case 32:return 61
break;
case 33:return 62
break;
case 34:return 59
break;
case 35:return 48
break;
case 36:return 65
break;
case 37:return 66
break;
case 38:return 67
break;
case 39:return 57
break;
case 40:return 46
break;
case 41:return 56
break;
case 42:return 54
break;
case 43:return 55
break;
case 44:return 57
break;
case 45:return 58
break;
case 46:return 74
break;
case 47:return 78
break;
case 48:return 79
break;
case 49: this.begin('INITIAL'); 
break;
case 50:/* skip whitespace */
break;
case 51:return 5
break;
case 52:return 'INVALID'
break;
}
},
rules: [/^(?:notes\b)/,/^(?:tabstave\b)/,/^(?:stave\b)/,/^(?:voice\b)/,/^(?:options\b)/,/^(?:text\b)/,/^(?:[^\s=]+)/,/^(?:[$])/,/^(?:[$])/,/^(?:[^,$]+)/,/^(?:[!])/,/^(?:[!])/,/^(?:[^!]+)/,/^(?:[^,\r\n]+)/,/^(?:\/)/,/^(?:\+)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\^)/,/^(?:,)/,/^(?:\|)/,/^(?:\.)/,/^(?:#)/,/^(?:@)/,/^(?:[b])/,/^(?:[s])/,/^(?:[h])/,/^(?:[p])/,/^(?:[t])/,/^(?:[T])/,/^(?:[-])/,/^(?:[_])/,/^(?:[v])/,/^(?:[V])/,/^(?:[u])/,/^(?:[d])/,/^(?:[0-9]+)/,/^(?:[q])/,/^(?:[w])/,/^(?:[h])/,/^(?:[d])/,/^(?:[S])/,/^(?:[A-GX])/,/^(?:[n])/,/^(?:[~])/,/^(?:[\r\n]+)/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"notes":{"rules":[7,10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true},"text":{"rules":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,49,50,51,52],"inclusive":true},"annotations":{"rules":[8,9,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,50,51,52],"inclusive":true},"options":{"rules":[6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,50,51,52],"inclusive":true},"command":{"rules":[11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,50,51,52],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,50,51,52],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vextab_parser;
exports.Parser = vextab_parser.Parser;
exports.parse = function () { return vextab_parser.parse.apply(vextab_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}